class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // if(!helper(beginWord,endWord))
        //     return 0;
        Set<String> meet= new HashSet();
        Queue<String> queue=new LinkedList();
        queue.add(beginWord);
        int size=1;
        int times=1;
         Set<String>  words = new HashSet(wordList);
        while(!queue.isEmpty()){
            int ttt=0;
            while((size--)>0){
                String tmp=queue.poll();
                if(tmp.equals(endWord))
                    return times;                
                for (int i = 0; i < tmp.length(); i++) {
                     char[] chars = tmp.toCharArray();       
                    for (char c = 'a'; c <= 'z'; c++) {
                        chars[i] = c;
                        // String ss = chars.toString();
                        String ss = new String(chars);
                        if(!meet.contains(ss)&&words.contains(ss)){
                            queue.offer(ss);
                            meet.add(ss);
                            ttt++;
                        }
                     }
            }
            }
            size=ttt;
            times++;
        }
        return 0;
    }
    
    // public boolean helper(String a,Set<String> words){
    //     return (words.contanis(a));       
    // }
}