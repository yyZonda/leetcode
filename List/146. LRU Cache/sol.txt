class LRUCache {
    private int capacity;
    private Map<Integer,Node> res;    
    Node head,tail;
    
    class Node{
        Node prev;
        Node next;
        int key,value;
        public Node(int key,int value){
            this.key=key;
            this.value=value;
            prev=null;
            next=null;
        }
    }
    public LRUCache(int capacity) {
        this.capacity=capacity;
        // res=new LinkedHashMap<Integer,Integer>(capacity,0.75f,true){
        //     protected boolean removeEldestEntry(Map.Entry eldest) {
        //             return size() > capacity;
        //         }
        //     };  
        res=new HashMap();
        head=new Node(0,0);
        tail=new Node(0,0);
        head.next=tail;
        tail.prev=head;
    }
    
    public int get(int key) {
        // if(res.containsKey(key))
        //     return res.get(key);
        // else
        //     return -1;
        if(res.containsKey(key)){
            int i=res.get(key).value;
            deleteNode(res.get(key));
            moveFirst(res.get(key));
            return i;
        }
        else
            return -1;
    }
    
    public void put(int key, int value) {           
        // res.put(key,value);
        if(res.containsKey(key)){
            Node tmp=res.get(key);
            tmp.value=value;
            deleteNode(tmp);
            moveFirst(tmp);
        }
        else if(capacity==0){
            Node tmp=tail.prev;
            deleteNode(tmp);
            res.remove(tmp.key);            
            res.put(key,new Node(key,value));
            moveFirst(res.get(key));
        }
        else{
            res.put(key,new Node(key,value));
            moveFirst(res.get(key));
            capacity--;
        }
    }
    public void deleteNode(Node n){
        n.prev.next=n.next;
        n.next.prev=n.prev;
    }
    public void moveFirst(Node n){
        Node tmp=head.next;
        n.next=tmp;
        tmp.prev=n;
        head.next=n;
        n.prev=head;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */