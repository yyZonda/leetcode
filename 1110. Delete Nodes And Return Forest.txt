/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        Set<Integer> dnum=new HashSet();
       for(int i:to_delete)
           dnum.add(i);
        List<TreeNode> res=new ArrayList();
        TreeNode tmp=helper(res,root,dnum);
       if(tmp!=null)
           res.add(tmp);
        return res;
    }
    public TreeNode helper(List<TreeNode> res,TreeNode root,Set<Integer> dnum){
        
        if(root==null)
            return null;
        int cur=root.val;
        if(dnum.contains(cur)){
            // if(root.left!=null){
            TreeNode left=helper(res,root.left,dnum);
                if(left!=null)
                res.add(left);
            // }
            // if(root.right!=null){
            TreeNode right=helper(res,root.right,dnum);
                if(right!=null)
            res.add(right);
            // }
            return null;
        }
        else{
            // if(root.left!=null)
            root.left=helper(res,root.left,dnum);
            // if(root.right!=null)
            root.right=helper(res,root.right,dnum);
            return root;
        }
    }
   
}