class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        int row=matrix.length;
        int col=matrix[0].length;
        
        Queue<int[]> queue = new LinkedList();
        for(int a=0;a<row;a++)
            for(int b=0;b<col;b++){
                if(matrix[a][b]==0)
                   queue.offer(new int[]{a,b});
                else
                    matrix[a][b]=Integer.MAX_VALUE;
            }
        int[][] dis=new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
        while(!queue.isEmpty()){
            int[] tmp=queue.poll();
            for(int[] d : dis){
                int r=tmp[0]+d[0];
                int c=tmp[1]+d[1];
                if(r<0||r>=matrix.length||c<0||c>=matrix[0].length||matrix[r][c]<=matrix[tmp[0]][tmp[1]]+1)
                continue;
                queue.add(new int[]{r,c});
                matrix[r][c]=matrix[tmp[0]][tmp[1]]+1;
            }
            
            
        }
        return matrix;
    }
    
//     public int helper(int[][] matrix,int[][] memory,int r,int c){
//         if(r<0||r>=matrix.length||c<0||c>=matrix[0].length)
//             return 0;
//         if(memory[r][c]!=0)
//             return memory[r][c];
//         if(matrix[r][c]==0)
//             return 0;
        
//         int d1=0,d2=0,d3=0,d4=0;
//         d1+=helper(matrix,memory,r+1,c)+1;
//         d3+=helper(matrix,memory,r,c+1)+1;
//         d2+=helper(matrix,memory,r-1,c)+1;    
//         d4+=helper(matrix,memory,r,c-1)+1;
        
//         int num=Math.min(d1,Math.min(d2,Math.min(d3,d4)));
//         memory[r][c]=num;
//         return num;
//     }
}