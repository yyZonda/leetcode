
class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        Map<Integer,Map<Integer,Integer>> map=new HashMap();
        for(int i=0;i<times.length;i++){
            int pre = times[i][0];
            int next=times[i][1];
            int w = times[i][2];
            map.putIfAbsent(pre,new HashMap());
            map.get(pre).put(next,w);
        }
        Queue<int[]> queue = new PriorityQueue<>((a,b)->(a[0]-b[0]));
        queue.offer(new int[]{0,K});
        boolean[] meet=new boolean[N+1];
        int res=0;
        int index=N;
        while(!queue.isEmpty()){
            int[] tmp=queue.poll();
            int cur=tmp[0];
            int node=tmp[1];
            if(meet[node])
                continue;
            meet[node]=true;
            res=cur;
            index--;
            if(map.containsKey(node)){
            for(int i:map.get(node).keySet()){
                if(!meet[i]){
                    queue.offer(new int[]{cur+map.get(node).get(i),i});
                }
            }
            }
        }
        return index==0?res:-1; 
    }
}