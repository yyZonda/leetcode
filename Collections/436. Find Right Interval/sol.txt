class Solution {
    public int[] findRightInterval(int[][] intervals) {
        int[] res = new int[intervals.length];
        Arrays.fill(res,-1);
        PriorityQueue<int[]> left = new PriorityQueue<>((a,b)->a[1]-b[1]);
        PriorityQueue<int[]> right = new PriorityQueue<>((a,b)->a[1]-b[1]);
        for(int i=0;i<intervals.length;i++){
            left.offer(new int[]{i,intervals[i][0]});
            right.offer(new int[]{i,intervals[i][1]});
        }
        while(!left.isEmpty()&&!right.isEmpty()){
            if(right.peek()[1]<=left.peek()[1]){
                int[] tmp =right.poll();
                res[tmp[0]]=left.peek()[0];
            }
            else
                left.poll();
        }
        return res;
        
    }
}