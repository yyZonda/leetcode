/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator {

    private List<Integer> nums;
    private int cur;
    private int size;
        
    public BSTIterator(TreeNode root) {
        nums = new ArrayList();
        helper(root,nums);
        cur=0;
        size=nums.size();
    }
    
    /** @return the next smallest number */
    public int next() {
        return nums.get(cur++);
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return cur<size?true:false;
    }
    
    public void helper(TreeNode root,List<Integer> nums){
        int l=0,r=0;
        if(root==null)
            return;
        helper(root.left,nums);
        nums.add(root.val);
        helper(root.right,nums);
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */